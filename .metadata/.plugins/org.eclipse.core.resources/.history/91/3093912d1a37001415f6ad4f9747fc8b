package v1;

import org.junit.Test;

import java.io.IOException;
import java.util.Arrays;

import org.apache.hadoop.io.*;
import org.apache.hadoop.mrunit.mapreduce.MapDriver;
import org.apache.hadoop.mrunit.mapreduce.ReduceDriver;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;




import v1.MaxTemperatureMapper;



public class MaxTemparatureMapperTest {

	@Test
	public void parseValidRecord() throws IOException,InterruptedException {
		Text value = new Text("0043011990999991950051518004+68750+023550FM-12+0382" +
				"99999V0203201N00261220001CN9999999N9-00111+99999999999");
		new MapDriver<LongWritable, Text, Text, IntWritable>()
		.withMapper(new MaxTemperatureMapper()) 
		.withInput(new LongWritable(), value)
		.withOutput(new Text("1950"), new IntWritable(-11))
		.runTest();
	} 
	
	@Test
	public void ignoreMissingTemperatureRecord() throws IOException, InterruptedException {
		Text value = new Text("0043011990999991950051518004+68750+023550FM-12+0382" +
				// Year ^^^^
				"99999V0203201N00261220001CN9999999N9+99991+99999999999");
		new MapDriver<LongWritable, Text, Text, IntWritable>()
		.withMapper(new MaxTemperatureMapper())
		.withInput(new LongWritable(), value)
		.runTest();
	}
	
	@Test
	public void returnsMaixmumIntergerInValues() throws IOException,
		InterruptedException {
		new ReduceDriver<Text, IntWritable, Text, IntWritable>()
			.withReducer(new MaxTemperatureReducer())
			.withInput(new Text("1950"), Arrays.asList(new IntWritable(10), new IntWritable(5)))
			.withOutput(new Text("1950"),new IntWritable(10))
			.runTest();
	}
	
	@Test
	public void test() throws Exception {
		Configuration conf = new Configuration();
		conf.set("fs.default.name", "file:///");
		conf.set("mapred.job.tracker", "local");
		
		Path input = new Path("input/ncdc/micro");
		Path output = new Path("output");
		
		FileSystem fs = FileSystem.getLocal(conf);
		fs.delete(output, true);
		
		MaxTemperatureDriver driver = new MaxTemperatureDriver();
		driver.setConf(conf);
		
		int exitCode = driver.run(new String[] {
				input.toString(), output.toString()
		});
		assertThat(exitCode, is(0));
		assertThat(fs.isFile(new Path("output/_SUCCESS")), is(1));
		
	}
}